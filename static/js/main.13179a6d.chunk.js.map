{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestRobots","onSearchChange","isPending","filteredRobot","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateOfSearch","initialStateOfRequest","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.13179a6d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img  alt='robots' \r\n            src={`https://robohash.org/${ id }?size=200x200`}\r\n      >\r\n      </img>\r\n      <div>\r\n        <h2>{ name }</h2>\r\n        <p>{ email }l</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      { \r\n        robots.map((user, i) => {\r\n          return ( \r\n            <Card \r\n              key={ i }\r\n              id={ robots[i].id }\r\n              name={ robots[i].name }\r\n              email={ robots[i].email }\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>This is not good.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={ searchChange }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div \r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '5px solid black',\r\n        height: '500px'\r\n      }}\r\n    >\r\n      { props.children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n    const filteredRobot = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return isPending ? \r\n    <h1>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={ onSearchChange }/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={ filteredRobot } />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }\r\n);\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst initialStateOfSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateOfSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateOfRequest = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateOfRequest, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <App />\r\n  </Provider>,document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}